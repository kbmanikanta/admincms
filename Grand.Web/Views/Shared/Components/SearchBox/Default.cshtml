@model SearchBoxModel
@using System.Text.Encodings.Web
<form asp-route="ProductSearch" method="get" id="small-search-box-form">
    <label for="small-searchterms" class="sr-only">@T("Search.SearchBox.Tooltip")</label>

    <div class="input-group flex-row">
        <input type="text" class="form-control search-box-text" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")">
        @if (Model.AvailableCategories.Any())
        {
            <select asp-for="SearchCategoryId" asp-items="Model.AvailableCategories" class="search-box-select custom-select input-group-addon"></select>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "searchbox_before_search_button" })
        @if (Model.SearchTermMinimumLength > 0)
        {
            <script type="text/javascript">
                $("#small-search-box-form").submit(function(event) {
                    if ($("#small-searchterms").val() == "") {
                        alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                        $("#small-searchterms").focus();
                        event.preventDefault();
                    }
                });
            </script>
        }
        <span class="input-group-btn">
            <button type="submit" class="btn btn-primary search-box-button float-sm-right">
                <span class="sr-only">@T("Search.SearchBox.Tooltip")</span>
                <span class="fa fa-search align-self-center"></span>
                <span class="pl-2 d-none d-lg-block">@T("search")</span>
            </button>
        </span>
        @await Component.InvokeAsync("AdminHeaderLinks")
    </div>
    @if (Model.AutoCompleteEnabled)
    {
        <text>
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#small-searchterms').autocomplete({
                        delay: 500,
                        minLength: @(Model.SearchTermMinimumLength.ToString()),
                        source: function (request, response) {
                            var category = '';
                            if ($("#SearchCategoryId").length > 0) {
                                category = $("#SearchCategoryId").val();
                            }
                            $.ajax({
                                url: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                                dataType: "json",
                                data: {
                                    term: request.term,
                                    categoryId: category
                                },
                                success: function (data) {
                                    response(data);
                                }
                            });
                        },
                        appendTo: '.search-box',
                        select: function(event, ui) {
                            $("#small-searchterms").val(ui.item.label);
                            setLocation(ui.item.producturl);
                            return false;
                        }
                    })
                        .data("ui-autocomplete")._renderItem = function(ul, item) {
                            var t = item.label;
                            //html encode
                            t = htmlEncode(t);
                            return $("<li class=\"list-group-item\"></li>")
                                .data("item.autocomplete", item)
                                .append("<a class=\"generalImg\">@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                                .appendTo(ul);
                        };
                });
            </script>
        </text>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "searchbox" })
</form>
