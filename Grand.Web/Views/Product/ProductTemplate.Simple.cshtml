@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div  itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="col d-md-inline-flex d-md-flex px-0">

                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    <!--product pictures-->
                    @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                    <div class="overview col-12 col-md-6">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <h2 class="generalTitle" itemprop="name">
                            @Model.Name
                        </h2>
                        @if (!String.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description generalMarginSupporter">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--product bundles-->
                        @await Html.PartialAsync("_ProductBundles", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--reservation info-->
                        @if (Model.ProductType == ProductType.Reservation)
                        {
                           var dataDictReservation = new ViewDataDictionary(ViewData);
                           dataDictReservation.TemplateInfo.HtmlFieldPrefix = string.Format("reservation_{0}", Model.Id);
                           @await Html.PartialAsync("_ReservationInfo", Model, dataDictReservation)
                        }
                        <!--price & add to cart-->
                        <div class="col-12 overview-buttons generalMarginSupporter">
                            <div class="row">
                                <div class="col-lg-12 px-0">
                                        @{
                                            var dataDictPrice = new ViewDataDictionary(ViewData);
                                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                        }
                                </div>
                                <div class="col-lg-12 px-0">
                                        @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                </div>
                                <div class="col-lg-12 generalAdToCart px-0 my-3">
                                        <!--auction-->
                                        @if (Model.ProductType == ProductType.Auction)
                                        {
                                            var dataDictAuction = new ViewDataDictionary(ViewData);
                                            dataDictAuction.TemplateInfo.HtmlFieldPrefix = string.Format("auction_{0}", Model.Id);
                                            @await Html.PartialAsync("_AuctionInfo", Model, dataDictAuction)
                                        }

                                        @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                        }
                                    <div class="d-md-inline-flex d-sm-flex product-simple-share my-2">
                                        @if (Model.ProductType == ProductType.SimpleProduct)
                                        {
                                            @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                            @await Html.PartialAsync("_CompareProductsButton", Model)
                                        }
                                        @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                        @await Html.PartialAsync("_ProductAskQuestionButton", Model)
                                    </div>
                                </div>
                            </div>
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                        <div class="col-12 product-share px-0">
                            @await Html.PartialAsync("_ShareButton", Model)
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>

                </div>

                <div class="col-12 mt-2 mb-2 px-0">
                    <div class="flex-row">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="#desctipt">
                                    <i class="fa fa-sticky-note-o d-lg-none"></i>
                                        <span class="d-none d-lg-block">@T("Products.Description")</span>
                                    </a>
                            </li>
                            @if (Model.ProductTags.Any())
                            {
                                <li class="nav-item">
                                    <a class="nav-link" data-toggle="tab" href="#tags">
                                        <i class="fa fa-tags d-lg-none"></i>
                                        <span class="d-none d-lg-block">@T("Products.Tags")</span>
                                    </a>
                                </li>
                            }
                            @if (Model.ProductSpecifications.Any())
                            {
                                <li class="nav-item">
                                    <a class="nav-link" data-toggle="tab" href="#spec">
                                        <span class="d-none d-lg-block">@T("Products.Specs")</span>
                                        <i class="fa fa-puzzle-piece d-lg-none"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="desctipt">
                                <div class="full-description generalMarginSupporter" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            </div>
                            <div class="tab-pane pt-1" id="tags">
                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                            </div>
                            <div class="tab-pane pt-1" id="spec">
                                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                            </div>
                        </div>
                    </div>
                </div>

                <!--wishlist, compare, email a friend-->
                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
</div>