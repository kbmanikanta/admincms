@model ProductDetailsModel.AddToCartModel
@if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId))
{
    @Html.HiddenFor(x => x.UpdatedShoppingCartItemId)
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
            
            if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
            {
                <div class="min-qty-notification text-danger">@Model.MinimumQuantityNotification</div>
            }
            if (!Model.DisableBuyButton)
            {
                if (Model.AllowedQuantities.Any())
                {
                    <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="col-xs-2 custom-select form-control qty-dropdown"></select>
                }
                else
                {
				<div class="col-3 col-lg-2 pl-2">
                    <label class="sr-only" for="addtocart_@(Model.ProductId)_EnteredQuantity">@Model.ProductId</label>
                    <input asp-for="EnteredQuantity" class="form-control qty-input m-0" type="text" />
				</div>
					if (!String.IsNullOrEmpty(Model.MeasureUnit))
					{
						<div class="col-md-2 col-12">
							<span class="btn btn-secondary input-group-addon qty-unit">
								@Model.MeasureUnit
							</span>
						</div>
					}
								
				}
                var addToCartText = "";
                if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId) && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                {
                    addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                }
                else
                {
                    addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.IsReservation)
                    {
                        addToCartText = T("ShoppingCart.Reservation").Text;
                    }
                    if (Model.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                }

            <script type="text/javascript">
                    $(document).ready(function () {
                        $("#@Html.IdFor(model => model.EnteredQuantity)").keydown(function (event) {
                            if (event.keyCode == 13) {
                                $("#add-to-cart-button-@Model.ProductId").click();
                                return false;
                            }
                        });
                    });
            </script>
	        <div class="col-6 col-md-3 col-lg-2 px-0">
                <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn btn btn-success add-to-cart-button" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
                    <span class="fa fa-shopping-cart"></span> @T("ShoppingCart.AddToCart").Text
                </button>
            </div>
            }

    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_add_info", additionalData = Model.ProductId })

}
