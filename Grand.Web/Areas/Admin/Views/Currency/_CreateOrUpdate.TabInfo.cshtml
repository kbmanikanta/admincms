@model CurrencyModel
@using Grand.Core.Domain.Directory

@(Html.LocalizedEditor<CurrencyModel, CurrencyLocalizedModel>("currency-info-localized",
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].Name)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].Name)
                    @Html.ValidationMessageFor(model => model.Locales[item].Name)
                </div>
            </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
        </div>
    </div>
                ,
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Name)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
            </div>
        </div>
    </div>
            ))
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.CurrencyCode)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.CurrencyCode)
                @Html.ValidationMessageFor(model => model.CurrencyCode)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Rate)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Rate)
                @Html.ValidationMessageFor(model => model.Rate)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayLocale)
            <div class="col-md-9 col-sm-9">
                @{
                    var cultures = System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes.SpecificCultures)
                        .OrderBy(x => x.EnglishName)
                        .Select(x => new SelectListItem
                        {
                            Value = x.IetfLanguageTag,
                            Text = string.Format("{0}. {1}", x.EnglishName, x.IetfLanguageTag)
                        })
                        .ToList();
                    cultures.Insert(0, new SelectListItem
                    {
                        Value = "",
                        Text = @T("Admin.Configuration.Currencies.Fields.DisplayLocale.Select").Text
                    });
                }
                @Html.GrandDropDownListFor(model => model.DisplayLocale, cultures)
                @Html.ValidationMessageFor(model => model.DisplayLocale)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.CustomFormatting)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.CustomFormatting)
                @Html.ValidationMessageFor(model => model.CustomFormatting)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Published)
            <div class="col-md-9 col-sm-9">
                <label class="mt-checkbox mt-checkbox-outline">
                    @Html.GrandEditorFor(model => model.Published)
                    <span></span>
                </label>
                @Html.ValidationMessageFor(model => model.Published)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayOrder)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.RoundingTypeId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.RoundingTypeId, ((RoundingType)Model.RoundingTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.RoundingTypeId)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.MidpointRoundId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.MidpointRoundId, ((MidpointRounding)Model.MidpointRoundId).ToSelectList())
                @Html.ValidationMessageFor(model => model.MidpointRoundId)
            </div>
        </div>

        @if (!String.IsNullOrEmpty(Model.Id))
            {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CreatedOn)
                <div class="col-md-9 col-sm-9">
                    <label class="control-label">@Html.DisplayFor(model => model.CreatedOn)</label> 
                </div>
            </div>
        }
    </div>
</div>