@model MessageTemplateModel
@using Grand.Core.Domain.Messages;

<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowedTokens)
            <div class="col-md-9 col-sm-9">
                @Html.DisplayFor(model => model.AllowedTokens)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @if (!String.IsNullOrEmpty(Model.Id))
                {
                    <label class="control-label">@Model.Name</label>
                        @Html.HiddenFor(model => model.Name)
                }
                else
                {
                    @Html.GrandEditorFor(model => model.Name)
                }
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsActive)
            <div class="col-md-9 col-sm-9">
                <label class="mt-checkbox mt-checkbox-outline">
                    @Html.EditorFor(model => model.IsActive)
                    <span></span>
                </label>
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>
        </div>
    </div>
</div>
@(Html.LocalizedEditor<MessageTemplateModel, MessageTemplateLocalizedModel>("messagetemplate-localized",
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].BccEmailAddresses)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].BccEmailAddresses)
                    @Html.ValidationMessageFor(model => model.Locales[item].BccEmailAddresses)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].Subject)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].Subject)
                    @Html.ValidationMessageFor(model => model.Locales[item].Subject)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].Body)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.Locales[item].Body, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Locales[item].Body)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                    <label class="col-md-3 col-sm-3 control-label">@T("Admin.ContentManagement.MessageTemplates.Test")</label>
                    <div class="col-md-9 col-sm-9">
                        <input type="button" class="btn green" value="@T("Admin.ContentManagement.MessageTemplates.Test")" onclick="setLocation('@(Url.Action("TestTemplate", new { id = Model.Id, languageId = Model.Locales[item].LanguageId }))')" />
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].EmailAccountId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.Locales[item].EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName", Model.Locales[item].EmailAccountId))
                    @Html.ValidationMessageFor(model => model.Locales[item].EmailAccountId)
                </div>
            </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
        </div>
    </div>
    ,
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.BccEmailAddresses)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.BccEmailAddresses)
                    @Html.ValidationMessageFor(model => model.BccEmailAddresses)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Subject)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Subject)
                    @Html.ValidationMessageFor(model => model.Subject)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Body)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.Body, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Body)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                    <label class="col-md-3 col-sm-3 control-label">
                        @T("Admin.ContentManagement.MessageTemplates.Test")
                    </label>
                    <div class="col-md-9 col-sm-9">
                        <input type="button" class="btn green" value="@T("Admin.ContentManagement.MessageTemplates.Test")" onclick="setLocation('@(Url.Action("TestTemplate", new { id = Model.Id }))')" />
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.EmailAccountId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName"))
                    @Html.ValidationMessageFor(model => model.EmailAccountId)
                </div>
            </div>
        </div>
    </div>
    ))
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.SendImmediately)
            <div class="col-md-9 col-sm-9">
                <label class="mt-checkbox mt-checkbox-outline">
                    @Html.EditorFor(model => model.SendImmediately)
                    <span></span>
                </label>
                @Html.ValidationMessageFor(model => model.SendImmediately)
            </div>
        </div>
        <div class="form-group" id="pnl-send-after">
            @Html.GrandLabelFor(model => model.DelayBeforeSend)
            <div class="col-md-9 col-sm-9">
                <div class="col-md-3 col-sm-3">
                    @Html.GrandEditorFor(model => model.DelayBeforeSend)
                    @Html.ValidationMessageFor(model => model.DelayBeforeSend)
                </div>
                <div class="col-md-3 col-sm-3">
                    @Html.GrandDropDownListFor(model => model.DelayPeriodId, ((MessageDelayPeriod)Model.DelayPeriodId).ToSelectList())
                    @Html.ValidationMessageFor(model => model.DelayPeriodId)
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AttachedDownloadId)
            <div class="col-md-9 col-sm-9">
                @{
                    //Static file attachments do not support URLs yet
                    //A store owner have to upload a file
                    //we store a value into "ViewData" and then use it in the Download.cshtml file
                    ViewData["Grand.DownloadEditor.DisableUrl"] = true;
                }
                <label class="mt-checkbox mt-checkbox-outline">
                    @Html.EditorFor(model => model.HasAttachedDownload) @T("Admin.ContentManagement.MessageTemplates.Fields.AttachedDownload.Exists")
                    <span></span>
                </label>
                <div id="pnlAttachedDownload">
                    @Html.EditorFor(model => model.AttachedDownloadId)
                    @Html.ValidationMessageFor(model => model.AttachedDownloadId)
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.HasAttachedDownload)").change(toggleHasAttachedDownload);
            $("#@Html.FieldIdFor(model => model.SendImmediately)").click(sendImmediately);
            toggleHasAttachedDownload();
            sendImmediately();
        });

        function toggleHasAttachedDownload() {
            if ($('#@Html.FieldIdFor(model => model.HasAttachedDownload)').is(':checked')) {
                $('#pnlAttachedDownload').show();
            }
            else {
                $('#pnlAttachedDownload').hide();
            }
        }

        function sendImmediately() {
            if ($('#@Html.FieldIdFor(model => model.SendImmediately)').is(':checked'))
                $('#pnl-send-after').hide();
            else
                $('#pnl-send-after').show();
        }

</script>